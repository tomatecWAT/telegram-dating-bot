# handlers.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from database import (
    upsert_user_from_telegram,
    get_user_by_telegram_id,
    get_next_profile_for,
    add_like,
    check_and_create_match_if_any,
    get_user_by_id,
    get_profile_payload
)

router = Router()

# --- FSM States for registration ---
class RegStates(StatesGroup):
    waiting_gender = State()
    waiting_age = State()
    waiting_city = State()
    waiting_target = State()
    waiting_bio = State()
    waiting_photo = State()

# /start - –Ω–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫—Ä–∞—Ç–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º)
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    tg_id = message.from_user.id
    existing = get_user_by_telegram_id(tg_id)
    if existing:
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /browse —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏—Ö.")
        await state.clear()
        return

    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º —Ç–≤–æ—é –∞–Ω–∫–µ—Ç—É.\n–°–Ω–∞—á–∞–ª–∞: —É–∫–∞–∂–∏ –ø–æ–ª (male/female/other).")
    await state.set_state(RegStates.waiting_gender)

@router.message(RegStates.waiting_gender)
async def process_gender(message: Message, state: FSMContext):
    gender = message.text.strip().lower()
    if gender not in ("male", "female", "other"):
        await message.answer("–ù–µ–ø–æ–Ω—è—Ç–Ω–æ. –í–≤–µ–¥–∏ 'male', 'female' –∏–ª–∏ 'other'.")
        return
    await state.update_data(gender=gender)
    await message.answer("–û—Ç–ª–∏—á–Ω–æ. –£–∫–∞–∂–∏ –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ–º).")
    await state.set_state(RegStates.waiting_age)

@router.message(RegStates.waiting_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if age <= 0 or age > 120:
            raise ValueError
    except ValueError:
        await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–º —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 25")
        return
    await state.update_data(age=age)
    await message.answer("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥.")
    await state.set_state(RegStates.waiting_city)

@router.message(RegStates.waiting_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    await state.update_data(city=city)
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞? (–æ–±—â–µ–Ω–∏–µ/–¥—Ä—É–∂–±–∞/–æ—Ç–Ω–æ—à–µ–Ω–∏—è/–¥—Ä—É–≥–æ–µ)")
    await state.set_state(RegStates.waiting_target)

@router.message(RegStates.waiting_target)
async def process_target(message: Message, state: FSMContext):
    target = message.text.strip()
    await state.update_data(target=target)
    await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ —Å–µ–±–µ (bio).")
    await state.set_state(RegStates.waiting_bio)

@router.message(RegStates.waiting_bio)
async def process_bio(message: Message, state: FSMContext):
    bio = message.text.strip()
    await state.update_data(bio=bio)
    await message.answer("–ü—Ä–∏—à–ª–∏ —Å–≤–æ—ë —Ñ–æ—Ç–æ (–∫–∞–∫ —Ñ–æ—Ç–æ, –Ω–µ —Ñ–∞–π–ª).")
    await state.set_state(RegStates.waiting_photo)

@router.message(RegStates.waiting_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo = message.photo[-1].file_id  # —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π
    data = await state.get_data()
    tg_id = message.from_user.id

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    user_db_id = upsert_user_from_telegram(
        telegram_id=tg_id,
        gender=data.get("gender"),
        age=data.get("age"),
        city=data.get("city"),
        target=data.get("target"),
        bio=data.get("bio"),
        photo=photo
    )
    await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª–∏: /browse")
    await state.clear()

@router.message(RegStates.waiting_photo)
async def process_photo_invalid(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ).")

# /browse - –ø–æ–∫–∞–∑–∞—Ç—å –æ–¥–Ω—É –∫–∞—Ä—Ç–æ—á–∫—É
@router.message(Command("browse"))
async def cmd_browse(message: Message):
    tg_id = message.from_user.id
    me = get_user_by_telegram_id(tg_id)
    if not me:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: /start")
        return
    me_id = me["id"]
    candidate = get_next_profile_for(me_id)
    if not candidate:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üëç –õ–∞–π–∫", callback_data=f"like:{candidate['id']}"),
            InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å–∫", callback_data=f"skip:{candidate['id']}")
        ]
    ])

    text = (f"{candidate['gender'].title()}, {candidate['age']} –ª–µ—Ç\n"
            f"{candidate['city']}\n–¶–µ–ª—å: {candidate['target']}\n\n{candidate['bio']}")
    if candidate["photo"]:
        await message.answer_photo(photo=candidate["photo"], caption=text, reply_markup=kb)
    else:
        await message.answer(text, reply_markup=kb)

# –ö–æ–ª–±—ç–∫–∏ like / skip
@router.callback_query(lambda c: c.data and c.data.startswith("like:"))
async def callback_like(query: CallbackQuery):
    data = query.data.split(":")
    to_user_id = int(data[1])
    from_tg_id = query.from_user.id
    from_row = get_user_by_telegram_id(from_tg_id)
    if not from_row:
        await query.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è: /start", show_alert=True)
        return
    from_id = from_row["id"]

    added = add_like(from_id, to_user_id)
    if not added:
        await query.answer("–í—ã —É–∂–µ –ª–∞–π–∫–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ç—á
    match_id = check_and_create_match_if_any(from_id, to_user_id)
    # —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∏–∫–Ω—É–≤—à–µ–≥–æ
    await query.answer("–õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

    # –ø–æ–∫–∞–∂–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É (–ø—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º /browse –∫–æ–º–∞–Ω–¥—É ‚Äî –Ω–æ –ª—É—á—à–µ –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –ø—Ä—è–º–æ)
    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á–∫—É - emulate by editing or just send a hint
    await query.message.answer("–ü–æ–∫–∞–∑—ã–≤–∞—é —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É...")
    # –ø–æ–ª—É—á–∏–ª–∏ match -> —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã
    if match_id:
        # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏
        a = get_user_by_id(from_id)
        b = get_user_by_id(to_user_id)
        # —Å–æ—Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        text_for_a = (f"–£ –≤–∞—Å –º–∞—Ç—á! üëè\n\n–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞:\n"
                      f"{b['gender'].title()}, {b['age']} –ª–µ—Ç\n{b['city']}\n–¶–µ–ª—å: {b['target']}\n\n{b['bio']}\n\n"
                      f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç: tg://user?id={b['telegram_id']}")
        text_for_b = (f"–£ –≤–∞—Å –º–∞—Ç—á! üëè\n\n–ü—Ä–æ—Ñ–∏–ª—å –ø–∞—Ä—Ç–Ω—ë—Ä–∞:\n"
                      f"{a['gender'].title()}, {a['age']} –ª–µ—Ç\n{a['city']}\n–¶–µ–ª—å: {a['target']}\n\n{a['bio']}\n\n"
                      f"–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç: tg://user?id={a['telegram_id']}")

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è (—á–µ—Ä–µ–∑ –±–æ—Ç–∞) ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ bot.send_message
        await query.message.bot.send_message(chat_id=a["telegram_id"], text=text_for_a)
        await query.message.bot.send_message(chat_id=b["telegram_id"], text=text_for_b)

@router.callback_query(lambda c: c.data and c.data.startswith("skip:"))
async def callback_skip(query: CallbackQuery):
    # –ø—Ä–æ—Å—Ç–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ: –æ—Ç–≤–µ—Ç–∏—Ç—å –∏ –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –Ω–∞–∂–∞—Ç—å /browse
    await query.answer("–ü—Ä–æ–ø—É—â–µ–Ω–æ.")
    await query.message.answer("–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–π: /browse")
