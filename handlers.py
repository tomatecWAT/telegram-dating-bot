from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
import aiohttp

from database import (
    get_user_by_telegram_id,
    add_user,
    update_user_field,
    update_user_coordinates,
    get_next_profile_for,
    get_random_profile,
    get_filtered_profile,
    add_like,
    check_match,
    save_user_filters,
    save_user_target_filters,
    save_user_distance_filter,
    get_user_filters,
    debug_filters_table
)

from keyboards import (
    gender_keyboard,
    target_keyboard,
    location_keyboard,
    get_city_keyboard_with_previous,
    filter_type_keyboard,
    filter_targets_keyboard,
    distance_keyboard,
    filters_completed_keyboard,
    profile_menu,
    profile_menu_text,
    view_menu,
    view_menu_text,
    paused_menu,
    paused_menu_text,
    stopped_menu,
    stopped_menu_text
)

router = Router()

# in-memory map user_id -> last shown profile row
viewing_state = {}

# ========== FSM –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ==========
class Registration(StatesGroup):
    gender = State()
    name = State()
    age = State()
    city_choice = State()  # –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ —É–∫–∞–∑–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
    city = State()
    target = State()
    bio = State()
    photo = State()

# ========== FSM –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤ ==========
class FilterSettings(StatesGroup):
    filter_type_selection = State()  # –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ (—Ü–µ–ª—å/—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ)
    target_selection = State()       # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π
    distance_selection = State()     # –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è

# ========== –§—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º ==========
async def get_city_from_coordinates(latitude, longitude):
    """
    –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º —á–µ—Ä–µ–∑ Nominatim API
    """
    try:
        url = f"https://nominatim.openstreetmap.org/reverse"
        params = {
            'lat': latitude,
            'lon': longitude,
            'format': 'json',
            'accept-language': 'ru',  # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            'addressdetails': 1
        }
        
        headers = {
            'User-Agent': 'TelegramDatingBot/1.0'  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è Nominatim
        }
        
        async with aiohttp.ClientSession() as session:
            async with session.get(url, params=params, headers=headers) as response:
                if response.status == 200:
                    data = await response.json()
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –≥–æ—Ä–æ–¥ –∏–∑ –æ—Ç–≤–µ—Ç–∞
                    address = data.get('address', {})
                    
                    # –ò—â–µ–º –≥–æ—Ä–æ–¥ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ–ª—è—Ö (–≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞)
                    city = (
                        address.get('city') or 
                        address.get('town') or 
                        address.get('village') or 
                        address.get('municipality') or
                        address.get('county') or
                        address.get('state')
                    )
                    
                    if city:
                        return city
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≥–æ—Ä–æ–¥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        country = address.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞')
                        return f"–ì–æ—Ä–æ–¥ —Ä—è–¥–æ–º —Å {country}"
                else:
                    return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {latitude:.2f}, {longitude:.2f}"
                    
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        return f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã {latitude:.2f}, {longitude:.2f}"

# ========== –ö–æ–º–∞–Ω–¥—ã ==========

@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    if user:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç–∞ —É–∂–µ –µ—Å—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        await message.answer("–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! üëã")
        await cmd_myprofile(message)
    else:
        # –ï—Å–ª–∏ –∞–Ω–∫–µ—Ç—ã –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à—É –∞–Ω–∫–µ—Ç—É.", reply_markup=ReplyKeyboardRemove())
        await message.answer("–í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=gender_keyboard)
        await state.set_state(Registration.gender)

@router.message(Command("myprofile"))
async def cmd_myprofile(message: Message):
    user = get_user_by_telegram_id(message.from_user.id)
    if not user:
        await message.answer("–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç –∞–Ω–∫–µ—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π /resetprofile –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ —Å —ç–º–æ–¥–∑–∏
    gender_display = "üë© –î–µ–≤—É—à–∫–∞" if user['gender'] == "female" else "üë® –ü–∞—Ä–µ–Ω—å"
    
    text = (
        f"üëã –ò–º—è: {user['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü–æ–ª: {gender_display}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {user['city']}\n"
        f"üéØ –¶–µ–ª—å: {user['target']}\n"
        f"üí¨ –û —Å–µ–±–µ: {user['bio']}"
    )
    if user['photo']:
        await message.answer_photo(photo=user['photo'], caption=text)
    else:
        await message.answer(text)

    await message.answer(profile_menu_text, reply_markup=profile_menu)

@router.message(Command("editprofile"))
async def cmd_editprofile(message: Message, state: FSMContext):
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–Ω–∫–µ—Ç—É. –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=gender_keyboard)
    await state.set_state(Registration.gender)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    await state.update_data(is_editing=True)

@router.message(Command("resetprofile"))
async def cmd_resetprofile(message: Message, state: FSMContext):
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=gender_keyboard)
    await state.set_state(Registration.gender)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è
    await state.update_data(is_editing=True)

@router.message(F.text == "üîÑ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ")
async def reset_profile_button(message: Message, state: FSMContext):
    await message.answer("–ó–∞–ø–æ–ª–Ω–∏–º –∞–Ω–∫–µ—Ç—É –∑–∞–Ω–æ–≤–æ! –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É:", reply_markup=gender_keyboard)
    await state.set_state(Registration.gender)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ —ç—Ç–æ —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è
    await state.update_data(is_editing=True)

# ========== –§–∏–ª—å—Ç—Ä—ã - –ù–û–í–´–ô –§–õ–û–£ ==========
@router.message(F.text == "üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")
async def setup_filters(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_filters = get_user_filters(message.from_user.id)
    
    if current_filters:
        targets = current_filters['target_filters']
        distance = current_filters['distance_filter']
        target_text = ', '.join(targets) if targets else "–í—Å–µ"
        distance_text = f"{distance} –∫–º" if distance else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
        
        filter_status = (
            f"üîß –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
            f"üéØ –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {target_text}\n"
            f"üìç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )
    else:
        filter_status = (
            f"üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
            f"üéØ –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: –í—Å–µ\n"
            f"üìç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: –ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
        )
    
    await message.answer(filter_status, reply_markup=filter_type_keyboard)
    await state.set_state(FilterSettings.filter_type_selection)

# ========== –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞ ==========
@router.message(FilterSettings.filter_type_selection, F.text == "üéØ –¶–µ–ª—å")
async def setup_target_filters(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏
    current_filters = get_user_filters(message.from_user.id)
    current_targets = []
    if current_filters and current_filters['target_filters']:
        current_targets = current_filters['target_filters']
    
    if current_targets:
        targets_text = ', '.join(current_targets)
        instruction = f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n\n–¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏: {targets_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    else:
        instruction = f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª–∏ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):"
    
    await message.answer(instruction, reply_markup=filter_targets_keyboard)
    await state.set_state(FilterSettings.target_selection)
    await state.update_data(selected_targets=current_targets.copy() if current_targets else [])

@router.message(FilterSettings.filter_type_selection, F.text == "üìç –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ")
async def setup_distance_filters(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    current_filters = get_user_filters(message.from_user.id)
    current_distance = None
    if current_filters:
        current_distance = current_filters['distance_filter']
    
    if current_distance:
        distance_text = f"{current_distance} –∫–º"
        instruction = f"üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è\n\n–¢–µ–∫—É—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_text}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:"
    else:
        instruction = f"üìç –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ:"
    
    await message.answer(instruction, reply_markup=distance_keyboard)
    await state.set_state(FilterSettings.distance_selection)

@router.message(FilterSettings.filter_type_selection, F.text == "üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def view_profiles_from_filters(message: Message, state: FSMContext):
    await state.clear()
    await cmd_view_filtered(message)

@router.message(FilterSettings.filter_type_selection, F.text == "üìÑ –ú–æ—è –∞–Ω–∫–µ—Ç–∞")
async def view_profile_from_filters(message: Message, state: FSMContext):
    await state.clear()
    await cmd_myprofile(message)

@router.message(Command("setup_filters"))
async def cmd_setup_filters(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await setup_filters(message, state)

# ========== Callback-—Ö–µ–Ω–¥–ª–µ—Ä—ã ==========

# Callback-—Ö–µ–Ω–¥–ª–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞
@router.callback_query(F.data.in_(["gender_female", "gender_male"]))
async def handle_gender_selection(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª –∏–∑ callback_data
    gender = "female" if callback.data == "gender_female" else "male"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ FSM
    await state.update_data(gender=gender)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    gender_text = "üë© –î–µ–≤—É—à–∫–∞" if gender == "female" else "üë® –ü–∞—Ä–µ–Ω—å"
    await callback.message.edit_text(f"–í—ã–±—Ä–∞–Ω –ø–æ–ª: {gender_text}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
    await callback.message.answer("–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? –ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è:")
    await state.set_state(Registration.name)
    
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer()

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π ==========
@router.callback_query(FilterSettings.target_selection, F.data.startswith("filter_target_"))
async def handle_target_filter_selection(callback: CallbackQuery, state: FSMContext):
    print(f"DEBUG: handle_target_filter_selection –≤—ã–∑–≤–∞–Ω —Å callback.data = '{callback.data}'")
    
    data = await state.get_data()
    selected_targets = data.get('selected_targets', [])
    print(f"DEBUG: –¢–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏: {selected_targets}")
    
    if callback.data == "filter_target_all":
        print("DEBUG: –í—ã–±—Ä–∞–Ω—ã –í–°–ï —Ü–µ–ª–∏")
        # –í—ã–±–∏—Ä–∞–µ–º –≤—Å–µ —Ü–µ–ª–∏
        selected_targets = ["–î—Ä—É–∂–±–∞", "–û–±—â–µ–Ω–∏–µ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ù–∏—á–µ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ", "–°–≤–∏–¥–∞–Ω–∏—è"]
        await state.update_data(selected_targets=selected_targets)
        
        await callback.message.edit_text(
            f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n\n"
            f"‚úÖ –í—ã–±—Ä–∞–Ω—ã –≤—Å–µ —Ü–µ–ª–∏!\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏: {', '.join(selected_targets)}",
            reply_markup=filter_targets_keyboard
        )
    elif callback.data == "filter_targets_save":
        print("DEBUG: –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –°–û–•–†–ê–ù–ò–¢–¨")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏
        if not selected_targets:
            print("DEBUG: –¶–µ–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            selected_targets = ["–î—Ä—É–∂–±–∞", "–û–±—â–µ–Ω–∏–µ", "–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–ù–∏—á–µ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ", "–°–≤–∏–¥–∞–Ω–∏—è"]
        
        print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª–∏: {selected_targets}")
        success = save_user_target_filters(callback.from_user.id, selected_targets)
        
        if success:
            await callback.message.edit_text(
                f"‚úÖ –¶–µ–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
                f"–°–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ü–µ–ª–∏: {', '.join(selected_targets)}\n\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–ª—å—à–µ:",
            )
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
            await callback.message.answer(
                await get_current_filters_text(callback.from_user.id),
                reply_markup=filter_type_keyboard
            )
            await state.set_state(FilterSettings.filter_type_selection)
        else:
            await callback.message.edit_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–ª–µ–π!\n"
                f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                reply_markup=filter_targets_keyboard
            )
    else:
        print(f"DEBUG: –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏: {callback.data}")
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ü–µ–ª–∏
        target = callback.data.replace("filter_target_", "")
        print(f"DEBUG: –ò–∑–≤–ª–µ—á–µ–Ω–Ω–∞—è —Ü–µ–ª—å: '{target}'")
        
        if target in selected_targets:
            selected_targets.remove(target)
            print(f"DEBUG: –£–¥–∞–ª–µ–Ω–∞ —Ü–µ–ª—å '{target}'")
        else:
            selected_targets.append(target)
            print(f"DEBUG: –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ü–µ–ª—å '{target}'")
        
        await state.update_data(selected_targets=selected_targets)
        
        target_text = ', '.join(selected_targets) if selected_targets else "–ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ"
        await callback.message.edit_text(
            f"üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–µ–ª–µ–π –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ü–µ–ª–∏: {target_text}",
            reply_markup=filter_targets_keyboard
        )
    
    await callback.answer()

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è ==========
@router.callback_query(FilterSettings.distance_selection, F.data.startswith("filter_distance_"))
async def handle_distance_filter_selection(callback: CallbackQuery, state: FSMContext):
    print(f"DEBUG: handle_distance_filter_selection –≤—ã–∑–≤–∞–Ω —Å callback.data = '{callback.data}'")
    
    if callback.data == "filter_distance_unlimited":
        distance_km = None
        distance_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    else:
        distance_km = int(callback.data.replace("filter_distance_", ""))
        distance_text = f"–¥–æ {distance_km} –∫–º"
    
    print(f"DEBUG: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_km}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
    success = save_user_distance_filter(callback.from_user.id, distance_km)
    
    if success:
        await callback.message.edit_text(
            f"‚úÖ –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_text}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–∞–ª—å—à–µ:"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        await callback.message.answer(
            await get_current_filters_text(callback.from_user.id),
            reply_markup=filter_type_keyboard
        )
        await state.set_state(FilterSettings.filter_type_selection)
    else:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è!\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=distance_keyboard
        )
    
    await callback.answer()

# ========== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ==========
async def get_current_filters_text(telegram_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏"""
    current_filters = get_user_filters(telegram_id)
    
    if current_filters:
        targets = current_filters['target_filters']
        distance = current_filters['distance_filter']
        target_text = ', '.join(targets) if targets else "–í—Å–µ"
        distance_text = f"{distance} –∫–º" if distance else "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    else:
        target_text = "–í—Å–µ"
        distance_text = "–ë–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π"
    
    return (
        f"üîß –¢–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã:\n\n"
        f"üéØ –¶–µ–ª–∏ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {target_text}\n"
        f"üìç –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {distance_text}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫–æ–π —Ñ–∏–ª—å—Ç—Ä —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å:"
    )

# ========== –î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ ==========
@router.callback_query(F.data == "start_viewing_profiles")
async def start_viewing_profiles(callback: CallbackQuery):
    """–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    await callback.message.delete()  # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã"
    mock_message = callback.message
    mock_message.from_user = callback.from_user
    
    await cmd_view_filtered(mock_message)
    await callback.answer()

@router.callback_query(F.data == "change_filters")
async def change_filters(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –∑–∞–Ω–æ–≤–æ"""
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ñ–∏–ª—å—Ç—Ä–∞
    await callback.message.edit_text(
        await get_current_filters_text(callback.from_user.id),
        reply_markup=filter_type_keyboard
    )
    
    await state.set_state(FilterSettings.filter_type_selection)
    await callback.answer()

# ========== FSM-—Ö–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ==========
@router.message(Registration.name)
async def reg_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?")
    await state.set_state(Registration.age)

@router.message(Registration.age)
async def reg_age(message: Message, state: FSMContext):
    await state.update_data(age=message.text)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ª–∏ –º—ã –ø—Ä–æ—Ñ–∏–ª—å
    data = await state.get_data()
    is_editing = data.get('is_editing', False)
    previous_city = None
    
    if is_editing:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_telegram_id(message.from_user.id)
        if user and user['city']:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º dictionary-style access
            previous_city = user['city']
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—á–µ—Ç–æ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
    keyboard = get_city_keyboard_with_previous(previous_city)
    
    if previous_city and not previous_city.startswith("üìç"):
        await message.answer(f"–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥. –ú–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–∏–π ({previous_city}) –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–æ–≤—ã–π:", reply_markup=keyboard)
    else:
        await message.answer("–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=keyboard)
    
    await state.set_state(Registration.city_choice)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≥–æ—Ä–æ–¥–∞
@router.message(Registration.city_choice, F.text.startswith("üèôÔ∏è "))
async def reg_city_previous_choice(message: Message, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    city = message.text.replace("üèôÔ∏è ", "")
    await state.update_data(city=city)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –ì–æ—Ä–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è: {city}", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", reply_markup=target_keyboard)
    await state.set_state(Registration.target)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@router.message(Registration.city_choice, F.location)
async def reg_city_location_choice(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    latitude = message.location.latitude
    longitude = message.location.longitude
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ä–æ–¥ –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    city_name = await get_city_from_coordinates(latitude, longitude)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    await state.update_data(city=city_name, latitude=latitude, longitude=longitude)
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –û–ø—Ä–µ–¥–µ–ª–µ–Ω –≥–æ—Ä–æ–¥: {city_name}", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", reply_markup=target_keyboard)
    await state.set_state(Registration.target)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
@router.message(Registration.city_choice)
async def reg_city_text_input(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.answer(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {message.text}", reply_markup=ReplyKeyboardRemove())
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞?", reply_markup=target_keyboard)
    await state.set_state(Registration.target)

@router.message(Registration.target)
async def reg_target(message: Message, state: FSMContext):
    # –°–ø–∏—Å–æ–∫ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö —Ü–µ–ª–µ–π
    valid_targets = ["ü§ù –î—Ä—É–∂–±–∞", "üí¨ –û–±—â–µ–Ω–∏–µ", "‚ù§Ô∏è –û—Ç–Ω–æ—à–µ–Ω–∏—è", "üòå –ù–∏—á–µ–≥–æ —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ", "üåü –°–≤–∏–¥–∞–Ω–∏—è"]
    
    if message.text in valid_targets:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–ª—å –±–µ–∑ —ç–º–æ–¥–∑–∏ –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        target_clean = message.text.split(" ", 1)[1]  # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –Ω–∞—á–∞–ª–µ
        await state.update_data(target=target_clean)
        await message.answer(f"–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {message.text}", reply_markup=ReplyKeyboardRemove())
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
        await state.update_data(target=message.text)
        await message.answer(f"–¶–µ–ª—å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞: {message.text}", reply_markup=ReplyKeyboardRemove())
    
    await message.answer("–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤ –æ —Å–µ–±–µ.")
    await state.set_state(Registration.bio)

@router.message(Registration.bio)
async def reg_bio(message: Message, state: FSMContext):
    await state.update_data(bio=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –¥–ª—è –∞–Ω–∫–µ—Ç—ã.")
    await state.set_state(Registration.photo)

@router.message(Registration.photo, F.photo)
async def reg_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    data = await state.update_data(photo=photo_id)
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    add_user(
        telegram_id=message.from_user.id,
        name=data["name"],
        gender=data["gender"],
        age=data["age"],
        city=data["city"],
        target=data["target"],
        bio=data["bio"],
        photo=data["photo"],
        latitude=data.get("latitude"),
        longitude=data.get("longitude")
    )

    await message.answer("–ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞! üéâ", reply_markup=profile_menu)
    await message.answer(profile_menu_text, reply_markup=profile_menu)
    await state.clear()

# ========== –ü—Ä–æ—Å–º–æ—Ç—Ä –∞–Ω–∫–µ—Ç —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π ==========
@router.message(F.text == "üëÄ –°–º–æ—Ç—Ä–µ—Ç—å –∞–Ω–∫–µ—Ç—ã")
async def cmd_view_filtered(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = get_user_filters(message.from_user.id)
    print(f"DEBUG: –§–∏–ª—å—Ç—Ä—ã –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ –∞–Ω–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {filters}")
    
    if filters:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        profile = get_filtered_profile(
            message.from_user.id,
            target_filters=filters['target_filters'] if filters['target_filters'] else None,
            distance_km=filters['distance_filter']
        )
        print(f"DEBUG: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é. –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile['name'] if profile else '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö'}")
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        profile = get_random_profile(message.from_user.id)
        print(f"DEBUG: –ë–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤. –ù–∞–π–¥–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å: {profile['name'] if profile else '–ù–µ—Ç –∞–Ω–∫–µ—Ç'}")
    
    if not profile:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n"
            "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            "‚Ä¢ –§–∏–ª—å—Ç—Ä—ã —Å–ª–∏—à–∫–æ–º —Å—Ç—Ä–æ–≥–∏–µ\n"
            "‚Ä¢ –í—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∞–Ω–∫–µ—Ç—ã —É–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω—ã\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")]],
                resize_keyboard=True
            )
        )
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ —Å —ç–º–æ–¥–∑–∏
    gender_display = "üë© –î–µ–≤—É—à–∫–∞" if profile['gender'] == "female" else "üë® –ü–∞—Ä–µ–Ω—å"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    filter_info = ""
    if filters:
        targets_text = ', '.join(filters['target_filters']) if filters['target_filters'] else "–í—Å–µ"
        distance_text = f"{filters['distance_filter']} –∫–º" if filters['distance_filter'] else "‚àû"
        filter_info = f"üîç –§–∏–ª—å—Ç—Ä—ã: {targets_text} | {distance_text}\n\n"
    
    text = (
        f"{filter_info}"
        f"üëã –ò–º—è: {profile['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü–æ–ª: {gender_display}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {profile['city']}\n"
        f"üéØ –¶–µ–ª—å: {profile['target']}\n"
        f"üí¨ –û —Å–µ–±–µ: {profile['bio']}"
    )
    
    if profile['photo']:
        await message.answer_photo(photo=profile['photo'], caption=text)
    else:
        await message.answer(text)

    # remember which profile we've shown to this user so Like/Dislike applies to it
    viewing_state[message.from_user.id] = profile
    await message.answer(view_menu_text, reply_markup=view_menu)

@router.message(Command("view"))
async def cmd_view_command_filtered(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    filters = get_user_filters(message.from_user.id)
    
    if filters:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é
        profile = get_filtered_profile(
            message.from_user.id,
            target_filters=filters['target_filters'] if filters['target_filters'] else None,
            distance_km=filters['distance_filter']
        )
    else:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        profile = get_random_profile(message.from_user.id)
    
    if not profile:
        await message.answer(
            "‚ùå –ù–µ—Ç –∞–Ω–∫–µ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞!\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.",
            reply_markup=ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="üîß –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã")]],
                resize_keyboard=True
            )
        )
        return

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª–∞ —Å —ç–º–æ–¥–∑–∏
    gender_display = "üë© –î–µ–≤—É—à–∫–∞" if profile['gender'] == "female" else "üë® –ü–∞—Ä–µ–Ω—å"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—é—Ç
    filter_info = ""
    if filters:
        targets_text = ', '.join(filters['target_filters']) if filters['target_filters'] else "–í—Å–µ"
        distance_text = f"{filters['distance_filter']} –∫–º" if filters['distance_filter'] else "‚àû"
        filter_info = f"üîç –§–∏–ª—å—Ç—Ä—ã: {targets_text} | {distance_text}\n\n"
    
    text = (
        f"{filter_info}"
        f"üëã –ò–º—è: {profile['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üë§ –ü–æ–ª: {gender_display}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {profile['city']}\n"
        f"üéØ –¶–µ–ª—å: {profile['target']}\n"
        f"üí¨ –û —Å–µ–±–µ: {profile['bio']}"
    )
    
    if profile['photo']:
        await message.answer_photo(photo=profile['photo'], caption=text)
    else:
        await message.answer(text)

    # remember which profile we've shown to this user so Like/Dislike applies to it
    viewing_state[message.from_user.id] = profile
    await message.answer(view_menu_text, reply_markup=view_menu)

# ========== –õ–æ–≥–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–Ω–∫–µ—Ç (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è) ==========
@router.message(F.text == "‚ù§Ô∏è –õ–∞–π–∫")
async def like_profile(message: Message):
    target = viewing_state.get(message.from_user.id)
    if not target:
        await message.answer("–ê–Ω–∫–µ—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return
    
    target_telegram_id = target['telegram_id']
    add_like(message.from_user.id, target_telegram_id, action="like")
    if check_match(message.from_user.id, target_telegram_id):
        await message.answer("üéâ –£ –≤–∞—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ! –ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º.")
    else:
        await message.answer("–õ–∞–π–∫ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úÖ")

    # clear viewed profile so next view will fetch another
    viewing_state.pop(message.from_user.id, None)
    await cmd_view_filtered(message)

@router.message(F.text == "üëé –î–∏–∑–ª–∞–π–∫")
async def dislike_profile(message: Message):
    target = viewing_state.get(message.from_user.id)
    if target:
        target_telegram_id = target['telegram_id']
        add_like(message.from_user.id, target_telegram_id, action="dislike")
        viewing_state.pop(message.from_user.id, None)
    await message.answer("–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –∞–Ω–∫–µ—Ç—É üëå")
    await cmd_view_filtered(message)

@router.message(F.text == "‚è∏ –ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫")
async def pause_search(message: Message):
    await message.answer(paused_menu_text, reply_markup=paused_menu)

@router.message(F.text == "üö´ –Ø –±–æ–ª—å—à–µ –Ω–µ —Ö–æ—á—É –Ω–∏–∫–æ–≥–æ –∏—Å–∫–∞—Ç—å")
async def stop_search(message: Message):
    await message.answer(stopped_menu_text, reply_markup=stopped_menu)

# ========== –û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ==========
@router.message(Command("debug_filters"))
async def debug_filters_command(message: Message):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("=== DEBUG FILTERS ===")
    debug_filters_table()
    
    user_filters = get_user_filters(message.from_user.id)
    await message.answer(
        f"üîß –û—Ç–ª–∞–¥–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n"
        f"–¢–≤–æ–∏ —Ñ–∏–ª—å—Ç—Ä—ã: {user_filters}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏ —Å–µ—Ä–≤–µ—Ä–∞."
    )

@router.message(Command("create_filters_table"))
async def create_filters_table_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        from database import get_connection
        conn = get_connection()
        cur = conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å—Ç—Ä–æ–≤
        cur.execute("""
        CREATE TABLE IF NOT EXISTS user_filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            target_filters TEXT,
            distance_filter INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_filters'")
        table_exists = cur.fetchone()
        
        if table_exists:
            await message.answer("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_filters —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É user_filters")
        
        conn.close()
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

@router.message(Command("test_filter_save"))
async def test_filter_save_command(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    test_targets = ["–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–î—Ä—É–∂–±–∞"]
    test_distance = 15
    
    print("=== –¢–ï–°–¢ –°–û–•–†–ê–ù–ï–ù–ò–Ø –§–ò–õ–¨–¢–†–û–í ===")
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π
    success1 = save_user_target_filters(message.from_user.id, test_targets)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–ª–µ–π: {success1}")
    
    # –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
    success2 = save_user_distance_filter(message.from_user.id, test_distance)
    print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è: {success2}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    loaded_filters = get_user_filters(message.from_user.id)
    print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã: {loaded_filters}")
    
    await message.answer(
        f"üß™ –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤:\n"
        f"–¶–µ–ª–∏: {success1} ‚úÖ –µ—Å–ª–∏ True\n"
        f"–†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {success2} ‚úÖ –µ—Å–ª–∏ True\n"
        f"–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ: {loaded_filters}\n"
        f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏."
    )

@router.message(Command("test_callbacks"))
async def test_callbacks_command(message: Message, state: FSMContext):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ callback'–æ–≤"""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_state(FilterSettings.target_selection)
    await state.update_data(selected_targets=["–û—Ç–Ω–æ—à–µ–Ω–∏—è"])
    
    await message.answer(
        "üß™ –¢–µ—Å—Ç callback'–æ–≤ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n"
        "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫–∏:",
        reply_markup=filter_targets_keyboard
    )