"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
"""
import sqlite3
import json
from database import get_connection, save_user_filters, get_user_filters
from config import DB_PATH

def check_database_structure():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("=== –ü–†–û–í–ï–†–ö–ê –°–¢–†–£–ö–¢–£–†–´ –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    conn = sqlite3.connect(DB_PATH)
    conn.row_factory = sqlite3.Row
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ user_filters
    cur.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_filters'")
    table_exists = cur.fetchone()
    
    if table_exists:
        print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ user_filters —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        cur.execute("PRAGMA table_info(user_filters)")
        columns = cur.fetchall()
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã user_filters:")
        for col in columns:
            print(f"   {col['name']} - {col['type']} {'(NOT NULL)' if col['notnull'] else '(NULL OK)'}")
    else:
        print("‚ùå –¢–∞–±–ª–∏—Ü–∞ user_filters –ù–ï —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return False
    
    conn.close()
    return True

def check_permissions():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í –î–û–°–¢–£–ü–ê ===")
    
    try:
        # –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        conn = get_connection()
        cur = conn.cursor()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –≤—Å—Ç–∞–≤–∫–∞
        cur.execute("INSERT INTO user_filters (telegram_id, target_filters, distance_filter) VALUES (?, ?, ?)", 
                   (999999, '["test"]', 10))
        conn.commit()
        print("‚úÖ –ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û")
        
        # –¢–µ—Å—Ç–æ–≤–æ–µ —á—Ç–µ–Ω–∏–µ
        cur.execute("SELECT * FROM user_filters WHERE telegram_id = ?", (999999,))
        result = cur.fetchone()
        if result:
            print("‚úÖ –ß—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –£–°–ü–ï–®–ù–û")
            print(f"   –î–∞–Ω–Ω—ã–µ: {dict(result)}")
        else:
            print("‚ùå –ß—Ç–µ–Ω–∏–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –ü–†–û–í–ê–õ")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cur.execute("DELETE FROM user_filters WHERE telegram_id = ?", (999999,))
        conn.commit()
        print("‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∑–∞–ø–∏—Å–∏: –£–°–ü–ï–®–ù–û")
        
        conn.close()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def manual_filter_test():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –≤—Ä—É—á–Ω—É—é"""
    print("\n=== –†–£–ß–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ò–õ–¨–¢–†–û–í ===")
    
    test_user_id = 779616206
    test_targets = ["–û—Ç–Ω–æ—à–µ–Ω–∏—è", "–î—Ä—É–∂–±–∞"]
    test_distance = 15
    
    print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {test_user_id}")
    print(f"   –¶–µ–ª–∏: {test_targets}")
    print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {test_distance} –∫–º")
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        print("\n1Ô∏è‚É£ –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...")
        save_user_filters(test_user_id, test_targets, test_distance)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        print("\n2Ô∏è‚É£ –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã...")
        loaded_filters = get_user_filters(test_user_id)
        
        if loaded_filters:
            print("‚úÖ –§–∏–ª—å—Ç—Ä—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {loaded_filters}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
            if (loaded_filters['target_filters'] == test_targets and 
                loaded_filters['distance_filter'] == test_distance):
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã!")
                return True
            else:
                print("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏!")
                return False
        else:
            print("‚ùå –§–∏–ª—å—Ç—Ä—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å!")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def check_all_filters():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ñ–∏–ª—å—Ç—Ä—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== –í–°–ï –§–ò–õ–¨–¢–†–´ –í –ë–ê–ó–ï –î–ê–ù–ù–´–• ===")
    
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        cur.execute("SELECT * FROM user_filters ORDER BY updated_at DESC")
        all_filters = cur.fetchall()
        
        if all_filters:
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_filters)}")
            for i, f in enumerate(all_filters, 1):
                print(f"\n{i}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {f['telegram_id']}")
                print(f"   –¶–µ–ª–∏: {f['target_filters']}")
                print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {f['distance_filter']} –∫–º")
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–æ: {f['updated_at']}")
        else:
            print("üì≠ –§–∏–ª—å—Ç—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ù–ï–¢")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {e}")
    
    conn.close()

def recreate_filters_table():
    """–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    print("\n=== –ü–ï–†–ï–°–û–ó–î–ê–ù–ò–ï –¢–ê–ë–õ–ò–¶–´ –§–ò–õ–¨–¢–†–û–í ===")
    
    conn = get_connection()
    cur = conn.cursor()
    
    try:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Ç–∞–±–ª–∏—Ü—É
        cur.execute("DROP TABLE IF EXISTS user_filters")
        print("üóëÔ∏è –°—Ç–∞—Ä–∞—è —Ç–∞–±–ª–∏—Ü–∞ —É–¥–∞–ª–µ–Ω–∞")
        
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–∞–±–ª–∏—Ü—É
        cur.execute("""
        CREATE TABLE user_filters (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE NOT NULL,
            target_filters TEXT,
            distance_filter INTEGER,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        """)
        
        conn.commit()
        print("‚úÖ –ù–æ–≤–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ–∑–¥–∞–Ω–∞")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ
        cur.execute("PRAGMA table_info(user_filters)")
        columns = cur.fetchall()
        print("üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã:")
        for col in columns:
            print(f"   {dict(col)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
        return False
    finally:
        conn.close()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –° –§–ò–õ–¨–¢–†–ê–ú–ò")
    print("=" * 50)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not check_database_structure():
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –¢–∞–±–ª–∏—Ü–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç!")
        print("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É? (y/N): ", end="")
        if input().lower() in ['y', 'yes', '–¥', '–¥–∞']:
            if recreate_filters_table():
                print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É")
            return
        else:
            print("‚ùå –ë–µ–∑ —Ç–∞–±–ª–∏—Ü—ã —Ñ–∏–ª—å—Ç—Ä—ã —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ –±—É–¥—É—Ç")
            return
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if not check_permissions():
        print("\nüö® –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É:", DB_PATH)
        return
    
    # 3. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏–ª—å—Ç—Ä—ã
    check_all_filters()
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫—É
    if manual_filter_test():
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("–§–∏–ª—å—Ç—Ä—ã –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print("\nüö® –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ò–õ–ò–°–¨!")
        print("–§–∏–ª—å—Ç—Ä—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–¥ –∏–ª–∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—É.")

if __name__ == "__main__":
    main()